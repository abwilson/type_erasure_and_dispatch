Efficient Type Erasure for Dynamic Dispatching 

# By using a little bit of template meta programming and a novel form of
# type erasure I'll illustrate an efficient technique for dispatching
# run time events to handler code.

*** What do I mean by Type Erasure?

Any mechanism for making the type of an object invisible to higher level code.

 - void*    

 - traditional runtime polymorphism

 - compile time polymorphism

 - std::variant, etc
 

*** What do I mean by Dynamic Dispatching?

Any mechanism for selecting what a program does based on information only available at run time.

Why are these related?

You nearly always need the former to do the latter.



*** Caveats

If you disagree with these definitions fine. For the duration of this
talk make a mental indirection to my definition.

This might all be really obvious to you in which case I'm sorry.

This is only of academic interest unless:

 - nanoseconds really matter

 - you are a nerd



*** Dynamic Dispatching?

We've all seen code like this:

[itch_switch.c]

*** Typical use case

 1) read a message

 2) Pull out a type ID field

 3) Pass the message to a "handler" for this type


*** For this demo

Code based on Eurex T7 EOBI

 - [EOBILayouts.h]

Not a proper feed handler

Handler logic only serves to stop optimizer removing the code.

 - Keeps track of total sizes

Test data is 2^20 randomly generated messages


*** What are the options

A bunch of if statements

A big switch - the defacto standard

An array of pointers to functions - good old C

An array of pointers to a handler base class

An array of lambdas held as std::function


*** The Big 'Orrible Switch

Rumour has it that compilers can generate jump tables

In practise usually cascading conditional jumps

Gcc seems to generate a binary chop - godbot example

No type erasure

Handlers can be inlined.



//
// Example C switch based dispatcher.
//
// https://github.com/csinitiative/fhce/blob/master/feeds/itch/multicast/common/fh_itch_parse.c
//
